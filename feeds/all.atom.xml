<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>@fibasile</title><link href="http://fibasile.github.io/" rel="alternate"></link><link href="http://fibasile.github.io/feeds/all.atom.xml" rel="self"></link><id>http://fibasile.github.io/</id><updated>2013-10-16T19:28:00+02:00</updated><entry><title>Compiling Node.js for Arduino YUN</title><link href="http://fibasile.github.io/compiling-nodejs-for-arduino-yun.html" rel="alternate"></link><updated>2013-10-16T19:28:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-10-16:compiling-nodejs-for-arduino-yun.html</id><summary type="html">&lt;p&gt;Since few weeks I was looking for a web environment to develop an IDE for the YUN. I already compiled an avr toolchain but I was not happy with a python based app server, since it makes difficult to handle websockets in an async fashion and so. &lt;/p&gt;
&lt;p&gt;So I looked at cross compiling plain node.js for mips, but learnt that Big Endian is not supported by V8, the javascript engine on which node is based. This probably explains why OpenWRT is missing a package for node, while for example it is available on the Intel Galileo distribution.&lt;/p&gt;
&lt;p&gt;Luckily some folks had already done a set of patches for v8 and managed to compile node.js for the YUN processor. This tutorial is based on the patches available at: &lt;a href="https://github.com/paul99/v8m-rb/pull/19"&gt;https://github.com/paul99/v8m-rb/pull/19&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial has been tested on Ubuntu 12.04. Make sure you have installed all the required packages for building the linino toolchain (see this &lt;a href="http://forum.arduino.cc//index.php?topic=187938.0"&gt;thread&lt;/a&gt;) plus the &lt;code&gt;gcc-multilib&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;1) Build the Linino toolchain, mine is located at &lt;code&gt;~/Cross/linino&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2) Create a work folder, mine is called &lt;code&gt;~/Cross/node&lt;/code&gt;. Inside it checkout this patched v8 branch&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/paul99/v8m-rb.git -b dm-dev-mipsbe&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3) Now build the v8 deps&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;v8m&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rb&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;dependencies&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5) create the v8 build script script, i called it &lt;code&gt;build.sh&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;STAGING_DIR=/home/fiore/Cross/linino/trunk/staging_dir
PREFIX=&lt;span class="nv"&gt;$STAGING_DIR&lt;/span&gt;/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-

export CC=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;gcc
export CXX=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;g++
export AR=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;ar
export RANLIB=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;ranlib
export LINK=&lt;span class="nv"&gt;$CXX&lt;/span&gt;
LIBPATH=&lt;span class="nv"&gt;$STAGING_DIR&lt;/span&gt;/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/lib/
export LDFLAGS=&amp;#39;-Wl,-rpath-link &amp;#39;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LIBPATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;

export GYPFLAGS=&amp;quot;-Dv8_use_mips_abi_hardfloat=false -Dv8_can_use_fpu_instructions=false&amp;quot;

# build a standalone v8 version 
# make mips.release library=shared  snapshot=off -j4

# build the version for compiling node
make mips.release library=shared  snapshot=off -j4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6) Make it executable and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7) now go on and download node-v0.10.20 source. Uncompress it in a folder with the same name within the work dir&lt;/p&gt;
&lt;p&gt;8) inside the created folder make a new script build.sh&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export BASEDIR=/home/fiore/Cross/linino/trunk
export STAGING_DIR=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASEDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/staging_dir

V8SOURCE=/home/fiore/Cross/node/v8m-rb

PREFIX=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;STAGING_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-

LIBPATH=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;STAGING_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/lib/


export AR=mips-openwrt-linux-uclibc-ar
export CC=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;gcc
export CXX=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;g++
export AR=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;ar
export RANLIB=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;ranlib
export LINK=&lt;span class="nv"&gt;$CXX&lt;/span&gt;

export LDFLAGS=&amp;#39;-Wl,-rpath-link &amp;#39;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LIBPATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;

export TARGET_PATH=~/Cross/node/opt

export GYPFLAGS=&amp;quot;-Dv8_use_mips_abi_hardfloat=false -Dv8_can_use_fpu_instructions=false&amp;quot;
make clean
make distclean

./configure --target=~/Cross/node/opt --without-snapshot --shared-v8 --shared-v8-includes=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;V8SOURCE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/include/ --shared-v8-libpath=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;V8SOURCE&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/out/mips.release/lib.target/
make snapshot=off -j4
make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;9) Make it executable and run it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;10) now you have both libv8 and node, and ready to copy them to the yun, but before make sure to strip them, and put them on the sdcard (both are around 8mb)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v8&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mips&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libv8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;

&lt;span class="n"&gt;mips&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;openwrt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libv8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="n"&gt;mips&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;openwrt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;10b) you might probably also need some other libs for example libstdc++, get them from the toolchain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linino&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;staging_dir&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;toolchain&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;mips_r2_gcc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linaro_uClibc&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.9.33.2&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libstdc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;11) Copy the nodejs-yun folder to the Yun&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;scp&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;  &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Cross&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;arduino&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sda1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;11) Now go on the Yun and make some symlinks from your /mnt/sda1/opt to the system's root&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sda1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sda1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;npm&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sda1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libv8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libv8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;
&lt;span class="n"&gt;ln&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sf&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sda1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libstdc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;libstdc&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;so&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;12) Node is now ready, try it! &lt;/p&gt;
&lt;p&gt;13) YUN has limited memory you can optimize node for it with the following params:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;stack_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;max_old_space_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;max_new_space_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;max_executable_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;gc_global&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;gc_interval&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;13) Please note that since you don't have gcc on the Yun any npm module requiring compiling must be cross-compiled on your host machine.&lt;/p&gt;
&lt;p&gt;Make sure you have the same version of node and npm installed on your host machine.&lt;/p&gt;
&lt;p&gt;We can use again a build script. Create build.sh inside a mips-modules&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;export BASEDIR=/home/fiore/Cross/linino/trunk
export STAGING_DIR=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;BASEDIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/staging_dir

V8SOURCE=/home/fiore/Cross/node/v8m-rb

PREFIX=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;STAGING_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/bin/mips-openwrt-linux-

LIBPATH=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;STAGING_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/toolchain-mips_r2_gcc-4.6-linaro_uClibc-0.9.33.2/lib/


export AR=mips-openwrt-linux-uclibc-ar
export CC=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;gcc
export CXX=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;g++
export AR=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;ar
export RANLIB=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PREFIX&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;ranlib
export LINK=&lt;span class="nv"&gt;$CXX&lt;/span&gt;

export LDFLAGS=&amp;#39;-Wl,-rpath-link &amp;#39;&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;LIBPATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;

export TARGET_PATH=~/Cross/node/opt

export GYPFLAGS=&amp;quot;-Dv8_use_mips_abi_hardfloat=false -Dv8_can_use_fpu_instructions=false&amp;quot;

export npm_config_arch=mips
# path to the node source that was used to create the cross-compiled version
export npm_config_nodedir=/home/fiore/Cross/node/node-v0.10.20

npm install $1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now chmod +x build.sh and invoke it with the name of the module you need to build i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="n"&gt;serialport&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside the ./node_modules folder, you will find the cross-compiled module and all its dependencies. Just move over everything via scp and you should be set. &lt;/p&gt;</summary><category term="arduino"></category><category term="yun"></category><category term="nodejs"></category></entry><entry><title>Interesting facts on the new Intel Galileo board</title><link href="http://fibasile.github.io/interesting-facts-on-intel-galileo.html" rel="alternate"></link><updated>2013-10-07T17:48:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-10-07:interesting-facts-on-intel-galileo.html</id><summary type="html">&lt;p&gt;The new Intel Galileo board is the first intel-based Arduino compatible board. I was given one during the Maker Faire Rome and today I spent some time checking the software and how it is programmed using Arduino.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; How the Arduino IDE talks to the board &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First interesting fact: the board is interfaced with the Arduino IDE through serial ZModem transfer.&lt;/p&gt;
&lt;p&gt;Digging into the ../Java/hardware/tools/x86 folder of the Arduino IDE downloaded for the board, you can find the toolchain and an upgrade.sh file. This is the file used by the Arduino IDE to upload sketches, compiled in elf format on the main PC and sent via
ZModem to the board.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Serial port access &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another interesting fact is that the USB client connector doesn't give access to the actual tty port of the Linux distribution, but probably listens only for Arduino IDE commands and serial monitor.&lt;/p&gt;
&lt;p&gt;The program responsible for this is called clloader &lt;/p&gt;
&lt;p&gt;/opt/cln/galileo/clloader --escape --binary --zmodem&lt;/p&gt;
&lt;p&gt;In order to have access to the tty one should use the Audio-jack port sitting on the left of the Ethernet port (called ttyS1). I never saw such a cable, but probably I'm not well informed. I would love to know where to get or how to build one.&lt;/p&gt;
&lt;p&gt;It would be lovely to access the console using the second USB port! &lt;/p&gt;
&lt;p&gt;&lt;strong&gt; SSH &amp;amp; Ethernet connectivity &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I also checked the Ethernet connectivity. With the stock "mini" Linux flashed on the board, Intel says it has no DHCP. But I discovered that Linux side gets correctly an IP address, and the Ethernet sketches work out of the box. &lt;/p&gt;
&lt;p&gt;Running ps tells that udhcp daemon is running.&lt;/p&gt;
&lt;p&gt;For accessing the board via SSH you need to install the provided Linux image on a micro sd card, as no ssh daemon is running.&lt;/p&gt;
&lt;p&gt;A trick to have a look to what is running is to use the ZModem protocol to execute remote commands, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lsz&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ps&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usbmodem1411&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;usbmodem1411&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt; Bogomips and buildroot &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using the trick I checked out dmesg, and discovered the Galileo kernel is Linux version 3.8.7-yocto-standard, compiled using the &lt;a href="https://www.yoctoproject.org"&gt;https://www.yoctoproject.org&lt;/a&gt; build system and Gcc 4.7.2.&lt;/p&gt;
&lt;p&gt;The CPU is rated 798.17 BogoMIPS, not bad!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Using GPIO pins at blazing fast speeds &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally I just learnt from a forum post, that it is actually possible to run GPIO pins at up to 2.93MHz using extended Arduino APIs, such as fastGpioDigitalWrite and fastGpioDigitalWriteDestructive. In this last case it is responsibility of the programmer to ensure GPIO registers are correct, directly handling latch. &lt;/p&gt;
&lt;p&gt;These are the arduino code examples posted by Intel engineers, &lt;a href="https://communities.intel.com/message/208098#208098"&gt;see full post&lt;/a&gt; for details:&lt;/p&gt;
&lt;p&gt;Example-1 - outputs 477kHz waveform on IO2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT_FAST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=!&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example-2 - outputs 683kHz waveform on IO3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT_FAST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;register&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;fastGpioDigitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GPIO_FAST_IO3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=!&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example-3 - outputs 2.93MHz waveform on IO3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;latchValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUTPUT_FAST&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fastGpioDigitalLatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;fastGpioDigitalWriteDestructive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latchValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;^=&lt;/span&gt; &lt;span class="n"&gt;GPIO_FAST_IO3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example-4 - outputs 2.93MHz waveform on both IO2 and IO3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;latchValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUPUT_FASTMODE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OUPUT_FASTMODE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fastGpioDigitalLatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// latch initial state&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;fastGpioDigitalWriteDestructive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latchValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;GPIO_FAST_IO3&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;GPIO_FAST_IO2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="n"&gt;GPIO_FAST_IO3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;|=&lt;/span&gt; &lt;span class="n"&gt;GPIO_FAST_IO3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;latchValue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;=&lt;/span&gt; &lt;span class="n"&gt;GPIO_FAST_IO2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As a forum user wrote, this is a "totally new beast".&lt;/p&gt;</summary><category term="makers"></category><category term="intel"></category><category term="galileo"></category><category term="arduino"></category></entry><entry><title>A short Maker Faire Europe Recap</title><link href="http://fibasile.github.io/short-maker-faire-recap.html" rel="alternate"></link><updated>2013-10-07T12:36:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-10-07:short-maker-faire-recap.html</id><summary type="html">&lt;p&gt;While my memories are still fresh I think it could be interesting to describe what happend at the European Maker Faire from my point of view.&lt;/p&gt;
&lt;p&gt;It was a huge success with tens of thousands of visitors and thousands of makers from around the world.&lt;/p&gt;
&lt;p&gt;I'm not "new" to technology events and I had already seen most of the 3d printers and stuff presented during the event on blogs and so on. So this report won't talk about how impressed I was about seeing 3d printers everywhere, robots, wearable, electronics etc.&lt;/p&gt;
&lt;p&gt;The first thing that really pleased me was how easy it was to talk to the people. Makers, entrepreneurs, geeks at large, everybody was keen to learn and discover new projects and meet others. I got in contact with very talented people and promising companies, I will keep in touch with them hoping to do new projects with collaborations all over the world.  &lt;/p&gt;
&lt;p&gt;I also met lots of "stars" in the maker world and even outside. I chatted with them, they where happy to answer any kind of question, helping anybody needed some information or hint, or even joking around. This is a great value of joining a Maker Faire and I suggest anybody to go visit one if they can.&lt;/p&gt;
&lt;p&gt;Among them I must cite Massimo Banzi, Alessandro Ranellucci, Josef Prusa, David Cuartielles, Bruce Sterling and thank them for making every of the last four days memorable.&lt;/p&gt;
&lt;p&gt;There also were what I consider three big announcements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Intel joining the maker world with an Arduino-approved board, called Galileo. Like all the other makers attending the announcement, I got a sample board, and will try to write something about its inner working in the next few days.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arduino TRE, a new powerful ARM-based board made by Texas Instruments. Unfortunately available only in Spring, but very promising, not only for the fact it is the first Arduino platform supporting audio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new model for the Arduino Community, with a deeper involvement of makers into new products development, including the possibility to earn money from it, which I consider very useful to reduce the fragmentation and speed up the community projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these imply the maker movement is making huge steps forward towards the "mainstream" market, with big corporation trying to get into it in different ways.&lt;/p&gt;
&lt;p&gt;I suspect more will join the train, and I'm very excited about that.&lt;/p&gt;
&lt;p&gt;On my side I'll try very hard to follow and develop new exciting stuff with the new boards, not forgetting the Yun for which I'm going to release a project I'm working on since its launch, and which I think could be a very useful contribution.&lt;/p&gt;
&lt;p&gt;On the business side, I received a very good feedback for my &lt;a href="http://leapleather.com"&gt;Leap Leather Case&lt;/a&gt; at Maketank.it stand and for the &lt;a href="http://www.artigianatodigitale.com/progetti/tworologio/"&gt;Tworologio concept&lt;/a&gt; of a twitter connected arduino based smartwatch.&lt;/p&gt;
&lt;p&gt;Finally I had the opportunity to present my &lt;a href="http://woodyui.com"&gt;Woody UI Kit&lt;/a&gt; in a room full of people, and answer interesting questions. I hope the project will have a good following, and more than 800 visits in one day to the Instructable I published could be a first proof of that.&lt;/p&gt;</summary><category term="makers"></category><category term="makerfaire"></category></entry><entry><title>Building a custom image for Arduino YUN</title><link href="http://fibasile.github.io/arduino-yun-custom-buildroot.html" rel="alternate"></link><updated>2013-09-14T10:04:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-09-14:arduino-yun-custom-buildroot.html</id><summary type="html">&lt;p&gt;As soon as I got my hands on the YUN I found the selection of packages lacks many interesting pieces of software that could
help building interesting appliances. I think Arduino people selected those packages that would easily fit in the minimal 64MB flash. &lt;/p&gt;
&lt;p&gt;So first of all I formatted a 4GB mini-sd as ext3 and plugged it in to the mini, it was recognized as /dev/sda1, so I quickly added an /opt folder and mounted in there instead. Now I have plenty of space to add my custom packages, and some "secure" disk space just in case I have to wipe my YUN loosing all flash content.&lt;/p&gt;
&lt;p&gt;Resetting the YUN flash is done by holding the reset button for 30 seconds. Holding it for 5 just resets the WiFi config.&lt;/p&gt;
&lt;p&gt;Then I spent some time to collect all the information needed to setup our own buildroot for the YUN, here you can find
a few tips to do it yourself. &lt;/p&gt;
&lt;p&gt;As I'm on a Mac, it is wise to use a VirtualBox machine (save you lots of headaches), with the latest Debian stable distribution.&lt;/p&gt;
&lt;h2&gt;What's a buildroot&lt;/h2&gt;
&lt;p&gt;The Arduino YUN is based on a Linux distribution called &lt;a href="openwrt.org"&gt;OpenWRT&lt;/a&gt;, which is mostly used to mess with wireless and network routers, liberating them from a proprietary firmware and adding many interesting features.&lt;/p&gt;
&lt;p&gt;In order to build such firmware, you need to build a cross-compiling toolchain first, a Linux kernel, and the core programs needed by any Linux systems.&lt;/p&gt;
&lt;p&gt;For making it easier OpenWRT people, did set up a Buildroot, or a set of scripts and makefiles which do just this in a confortable way, also using ipkg, a clone of Debian's dpkg to easily install packages when the system is setup. The system is based off &lt;a href="http://www.openembedded.org/wiki/Main_Page"&gt;OpenEmbedded&lt;/a&gt; which I was using long time ago to hack Sharp Zaurus. &lt;/p&gt;
&lt;p&gt;Arduino made a good choice to base their new Arduino YUN off OpenWRT, as it has a huge following and is quite nice build environment to work with.&lt;/p&gt;
&lt;p&gt;A nice intro on OpenWRT build root is available on this &lt;a href="https://forum.openwrt.org/viewtopic.php?pid=31794#p31794"&gt;forum post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Getting the source&lt;/h2&gt;
&lt;p&gt;First of all you should clone the Arduino YUN buildroot sources, available from &lt;a href="http://github.com/arduino/linino"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/arduino/linino.git linino&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will checkout the OpenWRT buildroot with specific Arduino YUN modifications&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;In order to successfully compile the builroot you'll need a few packages installed: for Debian Stable you can easily get them by running as root (or with sudo)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;subversion&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="n"&gt;libncurses5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;zlib1g&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;gawk&lt;/span&gt; &lt;span class="n"&gt;asciidoc&lt;/span&gt; \
&lt;span class="n"&gt;bash&lt;/span&gt; &lt;span class="n"&gt;bc&lt;/span&gt; &lt;span class="n"&gt;binutils&lt;/span&gt; &lt;span class="n"&gt;bzip2&lt;/span&gt; &lt;span class="n"&gt;fastjar&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="n"&gt;util&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt; &lt;span class="n"&gt;zlib1g&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libncurses5&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; \
&lt;span class="n"&gt;libssl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;perl&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;rsync&lt;/span&gt; &lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;sdcc&lt;/span&gt; &lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;gettext&lt;/span&gt; &lt;span class="n"&gt;xsltproc&lt;/span&gt; \
&lt;span class="n"&gt;zlib1g&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libxml&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;perl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've included a few you might already have installed, just in case someone had removed them, it won't hurt anyway to put them on the command line.&lt;/p&gt;
&lt;h2&gt;Disk usage and Network connection&lt;/h2&gt;
&lt;p&gt;You should make sure that you have enough disk space before starting the build process. It won't be nice to leave it building and find out the process stopped since you did run out of space, please consider at least 10GB to be safe.&lt;/p&gt;
&lt;p&gt;Also make sure to have a decent internet connection on, since the buildroot system will need to fetch lots of data from the network.&lt;/p&gt;
&lt;h2&gt;Configuring the kernel&lt;/h2&gt;
&lt;p&gt;Once you're done with prerequisites go on to configure the kernel:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;cd&lt;/span&gt;  &lt;span class="n"&gt;linino&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trunk&lt;/span&gt;    
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;menuconfig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If all the steps above have been done correctly you will be presented with a familiar menu, similar to the standard Linux kernel
build. Go on and select the kernel modules, and packages you want to build.&lt;/p&gt;
&lt;p&gt;Once you exit you can compare with diff the generated config with the one available on the Arduino YUN package repository, this should be
located at &lt;a href="http://download.linino.org/dogstick/all-in-one/latest/"&gt;http://download.linino.org/dogstick/all-in-one/latest/build-config.txt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;EDIT: If you want to keep the same config and packages getting built by Yun developers, also do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt; &lt;span class="n"&gt;uninstall&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rf&lt;/span&gt; &lt;span class="n"&gt;feeds&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;feeds&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;checkout&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;oldconfig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Build it&lt;/h2&gt;
&lt;p&gt;Now you can just run make to start the build process, get a cup of coffee, or several considering it needs to fetch many packages i.e. the Linux kernel and build lots of stuff.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that using the V=s param switches on verbose output. If you like you can add -j4 or -j8 depending on how many cores you configured on your machine or VM to speed things up a little.&lt;/p&gt;
&lt;p&gt;At the end of the process you should have images ready to be uploaded via TFTP (I'm currently investigating how), and a complete cross-compiling toolchain to test out new packages, and eventually package and contribute them to the offical repository.&lt;/p&gt;
&lt;p&gt;Have fun! &lt;/p&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;If the build stops for some reason please check&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;you have enough free disk space&lt;/li&gt;
&lt;li&gt;you have installed all the prerequisites&lt;/li&gt;
&lt;li&gt;you are using the correct config, when in doubt copy over the one downloaded from the dogstick site&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Changelog&lt;/h2&gt;
&lt;p&gt;UPDATED 2013-09-16: I added instructions got from the Arduino forums allowing to keep the original Arduino make config &lt;/p&gt;</summary><category term="projects"></category><category term="opensource"></category><category term="arduino"></category><category term="yun"></category></entry><entry><title>Getting Started with Arduino YUN</title><link href="http://fibasile.github.io/arduino-yun-getting-started.html" rel="alternate"></link><updated>2013-09-13T13:20:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-09-13:arduino-yun-getting-started.html</id><summary type="html">&lt;p&gt;I just received my &lt;a href="http://arduino.cc/en/Main/ArduinoBoardYun?from=Main.ArduinoYUN"&gt;Arduino YUN&lt;/a&gt;, a new product from &lt;a href="http://arduino.cc"&gt;Officine Arduino&lt;/a&gt; bridging the gap between microcontrollers and embedded Linux devices.&lt;/p&gt;
&lt;p&gt;The YUN packs in the form factor both devices, also adding USB, Wifi, Ethernet connectivity.&lt;/p&gt;
&lt;p&gt;I think many people willing to buy it could find interesting to learn how it works, and also some newbies could need some help to get started using it, so here's a quick guide of the steps to follow to get the YUN configured using a WiFi network connection: &lt;/p&gt;
&lt;p&gt;1) plug the mini-USB port on the YUN to your computer or to a usb-compatible charger using a mini-USB cable&lt;/p&gt;
&lt;p&gt;&lt;img alt="00 Plug" src="static/images/yun-getting-started/00-plug.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;2) go to your wifi-enabled computer, and after few seconds you should find a Arduino-YUN-XXX network you can connect to&lt;/p&gt;
&lt;p&gt;3) Once you joined the network, fire up your web browser and visit http://arduino.local, you will be presented with the following screen&lt;/p&gt;
&lt;p&gt;&lt;img alt="01 Login" src="static/images/yun-getting-started/01-login.png" /&gt;&lt;/p&gt;
&lt;p&gt;4) Type the default password which is "arduino"&lt;/p&gt;
&lt;p&gt;5) The following screen will show you the current network status, telling you if you're connected via wifi or ethernet. &lt;/p&gt;
&lt;p&gt;&lt;img alt="02 Welcome" src="static/images/yun-getting-started/02-welcome.png" /&gt;&lt;/p&gt;
&lt;p&gt;6) Now hit the configure button. At this point you will be prompted with a new screen, allowing to configure your password, it should be at least 8 chars long&lt;/p&gt;
&lt;p&gt;&lt;img alt="03 Password" src="static/images/yun-getting-started/03-password.png" /&gt;&lt;/p&gt;
&lt;p&gt;7) Scroll down, and configure access to you existing wireless network. Choose from the selection your network name, the kind of encryption you are using (most common is WPA) and the password you usually set to access your network.&lt;/p&gt;
&lt;p&gt;&lt;img alt="04 Wifi" src="static/images/yun-getting-started/04-wifi.png" /&gt;&lt;/p&gt;
&lt;p&gt;8) On the bottom of the page you are able to set a protection on access to sketches from the REST interface. If you don't know what this means, and in any case, it is safe to set this to "With password". &lt;/p&gt;
&lt;p&gt;&lt;img alt="05 Rest" src="static/images/yun-getting-started/05-rest.png" /&gt;&lt;/p&gt;
&lt;p&gt;9) Hit configure and restart. Now you can switch back to your existing wifi connection. If you did set your config data correctly the Arduino YUN should be again reachable using the http://arduino.local address, asking for the password you did set up at step 6).&lt;/p&gt;
&lt;p&gt;&lt;img alt="06 Restart" src="static/images/yun-getting-started/06-restart.png" /&gt;&lt;/p&gt;
&lt;p&gt;10) Optional - If you plan to access your Arduino YUN using ssh, I recommend to set up private key based login instead of plain old passwords: not only it is more secure (your password might be guessed, but nobody will be able to guess your private key), but more
practical so you don't have to type the password every time.&lt;/p&gt;
&lt;p&gt;If you want to set it, just hit Configure on the main screen shown after inserting the password, when a new page loads, on the top of the page you will now select "advanced configuration panel", select it and you will be presented with the Administration panel:&lt;/p&gt;
&lt;p&gt;Now select the System menu and the Administration option. You will be presented with a new form, allowing also to change the system password. &lt;/p&gt;
&lt;p&gt;&lt;img alt="07 Admin" src="static/images/yun-getting-started/07-admin.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now scroll down to SSH Keys, and paste in your SSH Certificate, then hit "Save and Apply". If you don't have one you can follow &lt;a href="https://help.github.com/articles/generating-ssh-keys"&gt;this tutorial&lt;/a&gt; to generate one. At the end you should come up with something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;rsa&lt;/span&gt; &lt;span class="n"&gt;AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;BWDSU&lt;/span&gt;
&lt;span class="n"&gt;GPl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3&lt;/span&gt;
&lt;span class="n"&gt;Pbv7kOdJ&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;MTyBlWXFCR&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="n"&gt;XA&lt;/span&gt;
&lt;span class="n"&gt;t3FaoJoAsncM1Q9x5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;V0Ww68&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Pb0rwert&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;En&lt;/span&gt;
&lt;span class="n"&gt;mZ&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;AW4OZPnTPI89ZPmVMLuayrD2cE86Z&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;il8b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;gw3r3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;nKatmIkjn2so1d01QraTlMqVSsbx&lt;/span&gt;
&lt;span class="n"&gt;NrRFi9wrf&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;M7Q&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;schacon&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;agadorlaptop&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;that you can copy and paste in the textarea. &lt;/p&gt;
&lt;p&gt;&lt;img alt="08 Ssh" src="static/images/yun-getting-started/08-ssh.png" /&gt;&lt;/p&gt;
&lt;p&gt;Once you are done, and applied the change you can try (depending on your platform) to ssh to the YUN using&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh root@arduino.local&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if the command doesn't ask you for a password, you are set up, and can move on to step 12. If it doesn't check you followed the instruction or ask for help to a friend or in a Linux forum.  &lt;/p&gt;
&lt;p&gt;12) If your passwordless ssh worked you can now disable password-based access to the YUN. Go back to the System &amp;gt; Administration menu item, under the SSH Access header and uncheck the following checkfields&lt;/p&gt;
&lt;p&gt;&lt;img alt="09 Ssh2" src="static/images/yun-getting-started/09-ssh2.png" /&gt;&lt;/p&gt;
&lt;p&gt;apply your changes, and you are done.&lt;/p&gt;
&lt;p&gt;13) Where to go from here: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;check out the &lt;a href="http://arduino.cc/en/Tutorial/Bridge"&gt;Bridge Library&lt;/a&gt; to interact with the digital and analog pins via the web interface&lt;/li&gt;
&lt;li&gt;take a look at the &lt;a href="http://arduino.cc/en/Tutorial/HomePage"&gt;Bridge Library examples&lt;/a&gt; to learn how you can call Linux-side commands via Arduino Sketches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope you found this useful, if so I'll write more tutorials on the features offered by the Administration panel. Have fun with your YUN!&lt;/p&gt;</summary><category term="projects"></category><category term="opensource"></category><category term="arduino"></category></entry><entry><title>QuickCanvas, a lean business canvas web app</title><link href="http://fibasile.github.io/quickcanvas-webapp.html" rel="alternate"></link><updated>2013-09-04T16:20:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-09-04:quickcanvas-webapp.html</id><summary type="html">&lt;p&gt;&lt;a href="http://quickcanvas.net"&gt;QuickCanvas&lt;/a&gt; is a web-based tool for building the so called Lean Business Canvas. This model is used by startuppers and entrepreneurs to quickly asses the feasibility of a business idea, by outlining all aspects of the business.&lt;/p&gt;
&lt;p&gt;Some proprietary commercial tools are available, but I don't like the idea to send my business ideas over the network, and for my own use I built an AngularJS app for creating the canvas.&lt;/p&gt;
&lt;p&gt;A cool feature is that the app works completely in the browser, but gives the ability to produce and download a PDF file containing the report.
I used the &lt;a href="http://parall.ax/products/jspdf"&gt;JSPDF&lt;/a&gt; library for that. &lt;/p&gt;
&lt;p&gt;The project is open-source so you can take a look at the source and contribute if you like, you can find it at &lt;a href="https://github.com/fibasile/quickcanvas"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;About Lean Canvas&lt;/h2&gt;
&lt;p&gt;Lean Canvas was created by Ash Maurya by adaptating the Business Model Canvas by Alexander Osterwalder as described in his book "Business Model Generation".&lt;/p&gt;
&lt;p&gt;This adaptation is more focused on how business models should be generated in the Lean Startup spirit.&lt;/p&gt;
&lt;p&gt;Lean Canvas is an actionable and compact business plan format, based on problems, solutions, key metrics and competitive advantages.&lt;/p&gt;
&lt;p&gt;While the structure is similar to the well-known Business Model Canvas, the sections headings have been exchanged to something more relevant to the Lean Startup and web-based app startups in general.&lt;/p&gt;
&lt;p&gt;The author describes the Lean Canvas and the ideas behind it on his website's Why Lean Canvas page.&lt;/p&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;Lean Canvas is a registered trademark of Spark59, Inc.&lt;/p&gt;
&lt;p&gt;The Lean Canvas itself is adapted from The Business Model Canvas http://www.businessmodelgeneration.com and is licensed under the Creative Commons Attribution-Share Alike 3.0 Un-ported License.&lt;/p&gt;
&lt;p&gt;QuickCanvas software is licensed under the MIT License.&lt;/p&gt;</summary><category term="projects"></category><category term="opensource"></category><category term="angularjs"></category></entry><entry><title>Dropbox and Python Virtualenv</title><link href="http://fibasile.github.io/dropbox-virtualenv.html" rel="alternate"></link><updated>2013-08-29T15:26:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-08-29:dropbox-virtualenv.html</id><summary type="html">&lt;p&gt;Since most of my systems are 64 bits macs, and I was using Python's excellent virtualenv system, I though it was possibly to just copy over the virtualenvs inside my project folders. &lt;/p&gt;
&lt;p&gt;Fact is that after a while, Dropbox will get stuck in changing some system's file permission, and it wont' sync anymore. As I found out, the only solution is to move your virtual envs out of the Dropbox folder.
I hope to save you some time with this tip.&lt;/p&gt;
&lt;p&gt;If you don't know it, Virtualenv basically links your system's python library and interpreter in a folder you specify, letting you use pip to install locally any module you need without polluting the system's paths.&lt;/p&gt;
&lt;p&gt;But Dropbox doesn't like those symlinks, especially when they link system folders. &lt;/p&gt;
&lt;p&gt;Quick fix: If you use virtualenv you should create your envs in a folder not synched by dropbox, i.e. something like ~/.virtualenvs/ i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;virtualenv&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;virtualenvs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myproject&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you are done installing all the modules using pip you can generate a &lt;code&gt;requirements.txt&lt;/code&gt; file using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;freeze&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then when you are on another machine re-create the virtualenv using the first command and reinstall every module using &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;. Remember to activate your newly created virtualenv first.&lt;/p&gt;</summary><category term="python"></category><category term="dropbox"></category></entry><entry><title>ArdOS An OS for Arduino</title><link href="http://fibasile.github.io/ardos-operating-system.html" rel="alternate"></link><updated>2013-08-28T10:20:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-08-28:ardos-operating-system.html</id><summary type="html">&lt;p&gt;Arduino has a great software platform, lots of libraries and so on. But if you need to program something more complex
than a single routine, it could bring some sincere headache synchronizing all the bits of code you might need.&lt;/p&gt;
&lt;p&gt;Then I found ArdOS, here's a quote from their &lt;a href="https://bitbucket.org/ctank/ardos-ide/wiki/Home"&gt;website&lt;/a&gt;: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ArdOS is a powerful multitasking operating system for the Arduino series of microcontroller boards centered around the Atmel ATmega 168, 328, 1280 and 2560 microcontrollers. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ArdOS lets you define tasks for which get executed in multi-tasking fashion, providing a true &lt;code&gt;sleep&lt;/code&gt; function which lets
the currently running task to be suspended and resumed after a given interval, much different from the &lt;code&gt;delay&lt;/code&gt; provided
by the standard Arduino library. &lt;/p&gt;
&lt;h2&gt;Getting started with ArdOS&lt;/h2&gt;
&lt;p&gt;First install the ArdOS library in the usual Arduino library location. Restart the IDE.&lt;/p&gt;
&lt;p&gt;My first try at ArdOS didnt' go very far, as I was using and Arduino Leonardo &lt;a href="#leonardo"&gt;see section below&lt;/a&gt;, luckily I have a few Arduino's around so I quickly moved to my trusted old Duemilanove board, where I started coding a basic sketch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;quot;kernel.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#define NUM_TASKS 2 &lt;/span&gt;&lt;span class="c1"&gt;// we must know in advance how many&lt;/span&gt;

&lt;span class="cm"&gt;/* simple sleep forever task */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;OSSleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* simple sleep forever task */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;OSSleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* regular Arduino setup */&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;OSInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_TASKS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Create the tasks&lt;/span&gt;
  &lt;span class="n"&gt;OSCreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;OSCreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Start the scheduler  &lt;/span&gt;
  &lt;span class="n"&gt;OSRun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cm"&gt;/* mandatory Arduino loop */&lt;/span&gt; 
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Nothing&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The sketch doesn't do much, but you can immediately notice few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;both &lt;code&gt;task()&lt;/code&gt; functions loop forever, one sleeping every 50ms, the other every 500ms &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;loop()&lt;/code&gt; body is empty, but required for compiling&lt;/li&gt;
&lt;li&gt;creating multi tasking apps is damn easy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let's say we want to blink a led connected at LED_PIN on a fixed rate, while echoing the serial.
So let's add a definition for it and change the task1, task2 and setup functions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;pause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;HIGH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;OSSleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;digitalWrite&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LOW&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;OSSleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pause&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="p"&gt;()){&lt;/span&gt;
                &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;OSSleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;OSInit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NUM_TASKS&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;57600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;pinMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LED_PIN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;OUTPUT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// Create the tasks&lt;/span&gt;
      &lt;span class="n"&gt;OSCreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;task1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;OSCreateTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;task2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="c1"&gt;// Start the scheduler  &lt;/span&gt;
      &lt;span class="n"&gt;OSRun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see we can deal with as many concurrent tasks we need, having them share independetly the MCU. The immediate benefit is that code is much cleaner this way.&lt;/p&gt;
&lt;p&gt;Furthermore, the first parameter of &lt;code&gt;OSCreateTask&lt;/code&gt; is the &lt;em&gt;priority&lt;/em&gt; of each task. In our example that would mean that Task 2
would be awaken from sleep only if Task 1 has given up execution using OSSleep itself, thus guaranteeing a more precise timing.&lt;/p&gt;
&lt;p&gt;If you have many tasks this also gives you the possibility to choose which one are more important and which could be delayed a bit without any problem.&lt;/p&gt;
&lt;p&gt;But the library offers much more functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semaphores: both binary and counter, allow checking when some fixed resource is over.&lt;/li&gt;
&lt;li&gt;Queues: allow to transfer data between tasks in a synchronized and respecting priority. &lt;/li&gt;
&lt;li&gt;Mutexes: allow to grant exclusive access to a resource to one task at a time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I plan to discuss in more detail all of these components and provide more advanced examples in further posts.&lt;/p&gt;
&lt;h2&gt;Note: Doesn't work on Arduino Leonardo  &lt;a name="leonardo"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned in the project description, the OS is designed around Atmel ATmega 168, 328, 1280 and 2560, so if you have an Arduino Leonardo, using ATmega 32u4 you cannot use it. &lt;/p&gt;
&lt;p&gt;Here's what you get compiling the sources:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;/Users/fiore/Documents/Arduino/libraries/ArdOS/kernel.cpp: In function &amp;#39;void configureTimer()&amp;#39;:&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fiore&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Arduino&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ArdOS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cpp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;471&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TCCR2A&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;declared&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fiore&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Arduino&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ArdOS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cpp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;472&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;TCNT2&amp;#39;&lt;/span&gt; &lt;span class="nx"&gt;was&lt;/span&gt; &lt;span class="nx"&gt;not&lt;/span&gt; &lt;span class="nx"&gt;declared&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="nx"&gt;scope&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Users&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;fiore&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Documents&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;Arduino&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;libraries&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;ArdOS&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;kernel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cpp&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;In&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;void startTimer()&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="err"&gt;/Users/fiore/Documents/Arduino/libraries/ArdOS/kernel.cpp:482: error: &amp;#39;TCCR2B&amp;#39; was not declared in this scope&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I found out that some timer registers have changed and currently investigating a possible solution to port it. For example
this &lt;a href="http://sourceforge.net/p/qpc/discussion/668726/thread/2378ff48/"&gt;post&lt;/a&gt; tells to rename the registers in order to make
use of timer no. 4 instead of no. 2.&lt;/p&gt;</summary><category term="arduino"></category><category term="ardos"></category></entry><entry><title>Blog moved to Pelican</title><link href="http://fibasile.github.io/blog-moved-to-pelican.html" rel="alternate"></link><updated>2013-08-26T10:20:00+02:00</updated><author><name>Fiore Basile</name></author><id>tag:fibasile.github.io,2013-08-26:blog-moved-to-pelican.html</id><summary type="html">&lt;p&gt;Since early 90s, I've been a Python language enthusiast. I started loving the language and used it through the years for most of my professional projects, and it never disappointed me.&lt;/p&gt;
&lt;p&gt;After many years of procrastination, I recently started blogging using the very complete &lt;a href="http://octopress.org"&gt;Octopress&lt;/a&gt;, currently powering my &lt;a href="http://www.fablabstarter.com"&gt;FabLab Starter&lt;/a&gt; blog. I find it very easy to use, but for some reason I really missed the subtle efficiency of battery-included python! &lt;/p&gt;
&lt;p&gt;For this blog I picked &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;, and I must say it really feels like home. I plan to write a little about it in the upcoming days, stay tuned.&lt;/p&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry></feed>